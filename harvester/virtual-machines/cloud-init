#cloud-config
ssh_pwauth: true
users:
  - name: root
    lock_passwd: false
    passwd: $6$MA6v7JyQGJABpN4F$eNXET.twXmaFBetvuqbxR5Vd7TjZkKrbE33keFr.XygHjyq220/cUyvIVFWp9hUhG66oh4lFum9V1jdQt4A/6.
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE4SrYkfM8Xu/9cFpqIOb8Y4OJ3WyPYJRB1zMOoTPJQN george@Georgioss-MacBook-Pro.local
chpasswd:
  expire: false
  list: |
    root:$6$MA6v7JyQGJABpN4F$eNXET.twXmaFBetvuqbxR5Vd7TjZkKrbE33keFr.XygHjyq220/cUyvIVFWp9hUhG66oh4lFum9V1jdQt4A/6.

write_files:
  - path: /usr/local/sbin/rke2-bootstrap.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      DOMAIN="kng.house"
      BOOTSTRAP="kng-01" 
      SERVERS=(kng-01 kng-02 kng-03)
      VIP_DNS="cluster.kng.house"
      VIP_IP="172.30.0.20"
      RANCHER_URL="https://rancher.kng.house"
      RANCHER_CLUSTER="local"
      TOKEN_SECRET_NS="local"
      TOKEN_SECRET_NAME="token-rke2" # create manual
      RANCHER_TOKEN="REPLACE_WITH_RANCHER_API_TOKEN" # create via rancher / expires 10 minutes
      HN="$(hostname -s)"
      mkdir -p /etc/rancher/rke2
      if ! command -v curl >/dev/null 2>&1; then
        zypper -n in curl || true
      fi
      API_URL="${RANCHER_URL}/k8s/clusters/${RANCHER_CLUSTER}/api/v1/namespaces/${TOKEN_SECRET_NS}/secrets/${TOKEN_SECRET_NAME}"
      AUTH="Authorization: Bearer ${RANCHER_TOKEN}"

      echo "[rke2-bootstrap] Fetching RKE2 token from Rancher at: ${API_URL}"
      while true; do
        RAW="$(curl -sSk -H "${AUTH}" -w '\n%{http_code}' "${API_URL}" || true)"
        BODY="$(printf '%s' "$RAW" | sed '$d')"
        CODE="$(printf '%s' "$RAW" | tail -n1)"

        if [ "$CODE" = "200" ]; then
          B64_TOKEN="$(printf '%s' "$BODY" \
            | tr -d '\n' \
            | awk 'match($0, /"data"\s*:\s*\{\s*"data"\s*:\s*"([^"]*)"/, m){print m[1]}')"
          if [ -n "${B64_TOKEN}" ]; then
            if base64 --help 2>&1 | grep -q -- '--decode'; then
              TOKEN="$(printf '%s' "${B64_TOKEN}" | base64 --decode)"
            else
              TOKEN="$(printf '%s' "${B64_TOKEN}" | base64 -D 2>/dev/null || printf '%s' "${B64_TOKEN}" | base64 -d)"
            fi
            if [ -n "${TOKEN}" ]; then
              echo "[rke2-bootstrap] Token retrieved."
              break
            fi
          fi
        fi
        echo "[rke2-bootstrap] Rancher/secret not ready (HTTP ${CODE}). Retrying in 10s..."
        sleep 10
      done

      # ---------- Build base config (shared) ----------
      {
        echo "token: \"${TOKEN}\""
        echo "write-kubeconfig-mode: \"0644\""
        echo "tls-san:"
        echo "  - ${VIP_DNS}"
        echo "  - kng-01.${DOMAIN}"
        echo "  - kng-02.${DOMAIN}"
        echo "  - kng-03.${DOMAIN}"
        if [[ -n "${VIP_IP}" ]]; then
          echo "  - ${VIP_IP}"
        fi
        # Disable built-in ingress; you'll run external LB + your own nginx-ingress later.
        echo "disable:"
        echo "  - rke2-ingress-nginx"
      } > /etc/rancher/rke2/config.yaml

      # ---------- Role decision ----------
      is_server=false
      for n in "${SERVERS[@]}"; do
        if [[ "${HN}" == "${n}" ]]; then
          is_server=true
          break
        fi
      done

      if $is_server; then
        # -------- CONTROL PLANE NODES --------
        if [[ "${HN}" == "${BOOTSTRAP}" ]]; then
          echo "cluster-init: true" >> /etc/rancher/rke2/config.yaml
          # Install server; service will start after reboot (enabled)
          curl -sfL https://get.rke2.io | INSTALL_RKE2_TYPE=server sh -
          systemctl enable rke2-server
        else
          # Wait for bootstrap API to respond, then configure join
          echo "server: \"https://${BOOTSTRAP}.${DOMAIN}:9345\"" >> /etc/rancher/rke2/config.yaml
          echo "[rke2-bootstrap] Waiting for ${BOOTSTRAP}.${DOMAIN}:9345 ..."
          until curl -sk --max-time 2 "https://${BOOTSTRAP}.${DOMAIN}:9345/ping" | grep -q pong; do
            sleep 5
          done
          curl -sfL https://get.rke2.io | INSTALL_RKE2_TYPE=server sh -
          systemctl enable rke2-server
        fi
      else
        # -------- WORKER NODES --------
        {
          printf '%s\n' "server: \"https://${BOOTSTRAP}.${DOMAIN}:9345\""
          printf '%s\n' "node-label:"
          printf '%s\n' "  - \"role=worker\""
        } >> /etc/rancher/rke2/config.yaml
        echo "[rke2-bootstrap] Waiting for ${BOOTSTRAP}.${DOMAIN}:9345 ..."
        until curl -sk --max-time 2 "https://${BOOTSTRAP}.${DOMAIN}:9345/ping" | grep -q pong; do
          sleep 5
        done
        curl -sfL https://get.rke2.io | INSTALL_RKE2_TYPE=agent sh -
        systemctl enable rke2-agent
      fi

      mkdir -p /root/.kube
      ln -sf /etc/rancher/rke2/rke2.yaml /root/.kube/config || true


runcmd:
  - [ /usr/sbin/transactional-update, "-n", "run", "sh", "-c", "zypper -n in qemu-guest-agent && systemctl enable qemu-guest-agent.service" ]
  - [ /usr/sbin/transactional-update, "-n", "run", "bash", "/usr/local/sbin/rke2-bootstrap.sh" ]

power_state:
  mode: reboot
  message: "Reboot to activate QGA snapshot"
  timeout: 30
  condition: true
