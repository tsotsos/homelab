#cloud-config
ssh_pwauth: true
users:
  - name: root
    lock_passwd: false
    passwd: $6$MA6v7JyQGJABpN4F$eNXET.twXmaFBetvuqbxR5Vd7TjZkKrbE33keFr.XygHjyq220/cUyvIVFWp9hUhG66oh4lFum9V1jdQt4A/6.
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE4SrYkfM8Xu/9cFpqIOb8Y4OJ3WyPYJRB1zMOoTPJQN george@Georgioss-MacBook-Pro.local
chpasswd:
  expire: false
  list: |
    root:$6$MA6v7JyQGJABpN4F$eNXET.twXmaFBetvuqbxR5Vd7TjZkKrbE33keFr.XygHjyq220/cUyvIVFWp9hUhG66oh4lFum9V1jdQt4A/6.

write_files:
  # --- Phase 1 (TU): best-effort installer only (no token/config, no systemd) ---
  - path: /usr/local/sbin/rke2-bootstrap.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      HN="$(hostname -s)"
      ROLE="agent"
      [[ "${HN}" =~ ^c[0-9]+$ ]] && ROLE="server"

      # Ensure curl is available inside the snapshot
      command -v curl >/dev/null 2>&1 || zypper -n in curl || true

      # Try to install RKE2 into the TU snapshot; skip systemd actions
      if [[ "${ROLE}" = "server" ]]; then
        curl -sfL https://get.rke2.io \
          | INSTALL_RKE2_CHANNEL=stable INSTALL_RKE2_TYPE=server \
            INSTALL_RKE2_SKIP_ENABLE=true INSTALL_RKE2_SKIP_START=true sh -
      else
        curl -sfL https://get.rke2.io \
          | INSTALL_RKE2_CHANNEL=stable INSTALL_RKE2_TYPE=agent \
            INSTALL_RKE2_SKIP_ENABLE=true INSTALL_RKE2_SKIP_START=true sh -
      fi

  # --- Phase 2 (after reboot): token fetch, config, start; self-heal install if needed ---
  - path: /usr/local/sbin/rke2-firstboot.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/usr/bin/env bash
      set -euo pipefail

      # Log to file + journal
      exec > >(tee -a /var/log/rke2-firstboot.log) 2>&1

      # ---- your values ----
      DOMAIN="kng.house"
      VIP_DNS="cluster.kng.house"
      VIP_IP="172.30.0.20"
      BOOTSTRAP="c1"
      RANCHER_URL="https://rancher.kng.house"
      RANCHER_CLUSTER="local"
      TOKEN_SECRET_NS="local"
      TOKEN_SECRET_NAME="token-rke2"
      RANCHER_TOKEN="token-tl9ps:rc7jg5d8swgzz4mgjmkkrkqx9lqknpjxgf5bhwbbgx558sr98cs7w7"  # short-lived
      # ---------------------

      HN="$(hostname -s)"
      FQDN="${HN}.${DOMAIN}"
      BOOTSTRAP_FQDN="${BOOTSTRAP}.${DOMAIN}"

      systemctl daemon-reload || true

      unit_exists() {
        local n="$1"
        [[ -f "/etc/systemd/system/${n}.service" ]] \
          || [[ -f "/usr/local/lib/systemd/system/${n}.service" ]] \
          || [[ -f "/usr/lib/systemd/system/${n}.service" ]]
      }

      ROLE="agent"
      [[ "${HN}" =~ ^c[0-9]+$ ]] && ROLE="server"

      # Ensure CLI conveniences
      install -d /usr/local/bin
      for b in kubectl crictl ctr; do
        if [ -x "/var/lib/rancher/rke2/bin/${b}" ]; then
          ln -sf "/var/lib/rancher/rke2/bin/${b}" "/usr/local/bin/${b}"
        fi
      done
      mkdir -p /root/.kube
      ln -sf /etc/rancher/rke2/rke2.yaml /root/.kube/config || true

      # If the installer didn't land the units yet, install via TU now and exit;
      # the reboot will make units visible and this service will run again.
      if [[ "${ROLE}" = "server" ]] && ! unit_exists rke2-server; then
        echo "[firstboot] rke2-server.service missing -> installing via transactional-update and exiting"
        transactional-update -n run bash -lc 'curl -sfL https://get.rke2.io | INSTALL_RKE2_CHANNEL=stable INSTALL_RKE2_TYPE=server INSTALL_RKE2_SKIP_ENABLE=true INSTALL_RKE2_SKIP_START=true sh -' || true
        exit 0
      fi
      if [[ "${ROLE}" = "agent" ]] && ! unit_exists rke2-agent; then
        echo "[firstboot] rke2-agent.service missing -> installing via transactional-update and exiting"
        transactional-update -n run bash -lc 'curl -sfL https://get.rke2.io | INSTALL_RKE2_CHANNEL=stable INSTALL_RKE2_TYPE=agent INSTALL_RKE2_SKIP_ENABLE=true INSTALL_RKE2_SKIP_START=true sh -' || true
        exit 0
      fi

      # Wait helper for non-bootstrap nodes (ignore SSL)
      wait_for_api() {
        until curl -sk --max-time 2 "https://${BOOTSTRAP_FQDN}:9345/ping" | grep -q pong; do
          sleep 5
        done
      }

      # ---- Fetch cluster token from Rancher (bounded retry; ignore SSL) ----
      API_URL="${RANCHER_URL}/k8s/clusters/${RANCHER_CLUSTER}/api/v1/namespaces/${TOKEN_SECRET_NS}/secrets/${TOKEN_SECRET_NAME}"
      AUTH="Authorization: Bearer ${RANCHER_TOKEN}"
      TOKEN=""
      waited=0
      until [ -n "${TOKEN}" ] || [ ${waited} -ge 900 ]; do  # 15 minutes max
        RAW="$(curl -sSk -H "${AUTH}" -w '\n%{http_code}' "${API_URL}" || true)"
        BODY="$(printf '%s' "$RAW" | sed '$d')"
        CODE="$(printf '%s' "$RAW" | tail -n1)"
        if [ "$CODE" = "200" ]; then
          B64_TOKEN="$(printf '%s' "$BODY" | tr -d '\n' | awk 'match($0, /"data"\s*:\s*\{\s*"data"\s*:\s*"([^"]*)"/, m){print m[1]}')"
          if [ -n "${B64_TOKEN}" ]; then
            if base64 --help 2>&1 | grep -q -- '--decode'; then
              TOKEN="$(printf '%s' "${B64_TOKEN}" | base64 --decode)"
            else
              TOKEN="$(printf '%s' "${B64_TOKEN}" | base64 -D 2>/dev/null || printf '%s' "${B64_TOKEN}" | base64 -d)"
            fi
          fi
        fi
        [ -n "${TOKEN}" ] || { sleep 10; waited=$((waited+10)); }
      done
      if [ -z "${TOKEN}" ]; then
        echo "[firstboot] Token not available (probably expired) â€” will retry next boot"
        exit 1
      fi

      # ---- Write /etc/rancher/rke2/config.yaml ----
      install -d /etc/rancher/rke2
      CFG="/etc/rancher/rke2/config.yaml"
      : > "${CFG}"
      printf 'token: "%s"\n' "${TOKEN}" >> "${CFG}"
      printf 'write-kubeconfig-mode: "0644"\n' >> "${CFG}"
      printf 'tls-san:\n' >> "${CFG}"
      printf '  - %s\n' "${VIP_DNS}" >> "${CFG}"
      printf '  - %s\n' "${BOOTSTRAP_FQDN}" >> "${CFG}"
      if [[ "${ROLE}" = "server" ]]; then
        printf '  - %s\n' "${FQDN}" >> "${CFG}"
      fi
      if [ -n "${VIP_IP}" ]; then printf '  - %s\n' "${VIP_IP}" >> "${CFG}"; fi
      printf 'disable:\n' >> "${CFG}"
      printf '  - rke2-ingress-nginx\n' >> "${CFG}"
      printf 'kube-controller-manager-arg:\n' >> "${CFG}"
      printf '  - "cloud-provider=external"\n' >> "${CFG}"
      printf 'kubelet-arg:\n' >> "${CFG}"
      printf '  - "cloud-provider=external"\n' >> "${CFG}"

      # Start the right service
      if [[ "${ROLE}" = "server" ]]; then
        if [[ "${HN}" != "${BOOTSTRAP}" ]]; then
          wait_for_api
        fi
        systemctl enable --now rke2-server.service
      else
        {
          printf 'server: "https://%s:9345"\n' "${BOOTSTRAP_FQDN}"
          printf 'node-label:\n'
          printf '  - "role=worker"\n'
        } >> "${CFG}"
        wait_for_api
        systemctl enable --now rke2-agent.service
      fi

      install -d /var/lib/rancher/rke2
      : > /var/lib/rancher/rke2/.firstboot-done

  - path: /etc/systemd/system/rke2-firstboot.service
    permissions: '0644'
    owner: root:root
    content: |
      [Unit]
      Description=RKE2 first-boot enabler (server/agent) and CLI symlinks
      Wants=network-online.target
      After=network-online.target
      ConditionPathExists=!/var/lib/rancher/rke2/.firstboot-done

      [Service]
      Type=oneshot
      ExecStart=/usr/local/sbin/rke2-firstboot.sh
      Restart=on-failure
      RestartSec=10s
      StandardOutput=journal
      StandardError=journal

      [Install]
      WantedBy=multi-user.target

runcmd:
  # Single TU run (no stacking). If the installer fails here, first-boot will self-install via TU.
  - [ /usr/sbin/transactional-update, "-n", "run", "sh", "-c", "zypper -n in qemu-guest-agent && systemctl enable qemu-guest-agent.service; bash /usr/local/sbin/rke2-bootstrap.sh || true; systemctl enable rke2-firstboot.service" ]

power_state:
  mode: reboot
  message: "Reboot to start RKE2"
  timeout: 30
  condition: true
