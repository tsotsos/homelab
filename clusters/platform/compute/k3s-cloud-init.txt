#cloud-config
timezone: Europe/Athens

ssh_pwauth: true
users:
  - name: root
    lock_passwd: false
    passwd: $6$MA6v7JyQGJABpN4F$eNXET.twXmaFBetvuqbxR5Vd7TjZkKrbE33keFr.XygHjyq220/cUyvIVFWp9hUhG66oh4lFum9V1jdQt4A/6.
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIE4SrYkfM8Xu/9cFpqIOb8Y4OJ3WyPYJRB1zMOoTPJQN george@Georgioss-MacBook-Pro.local
chpasswd:
  expire: false
  list: |
    root:$6$MA6v7JyQGJABpN4F$eNXET.twXmaFBetvuqbxR5Vd7TjZkKrbE33keFr.XygHjyq220/cUyvIVFWp9hUhG66oh4lFum9V1jdQt4A/6.

write_files:
  - path: /usr/local/sbin/k3s-firstboot.sh
    permissions: '0755'
    owner: root:root
    content: |
      #!/usr/bin/env bash
      set -euo pipefail
      exec > >(tee -a /var/log/k3s-firstboot.log) 2>&1

      # ----
      DOMAIN="kng.house"
      VIP_DNS="cluster.kng.house"
      VIP_IP="172.30.0.20"
      BOOTSTRAP="c1"
      BOOTSTRAP_IP="172.30.0.10"
      RANCHER_URL="https://rancher.kng.house"
      RANCHER_CLUSTER="local"
      TOKEN_SECRET_NS="local"
      TOKEN_SECRET_NAME="token-k3s"
      RANCHER_TOKEN="token-tl9ps:rc7jg5d8swgzz4mgjmkkrkqx9lqknpjxgf5bhwbbgx558sr98cs7w7"
      # ----

      HN="$(hostname -s)"
      FQDN="${HN}.${DOMAIN}"
      BOOTSTRAP_FQDN="${BOOTSTRAP}.${DOMAIN}"

      # Role from hostname (override with /etc/node-role if you like)
      if [ -f /etc/node-role ]; then
        ROLE="$(cat /etc/node-role)"
      else
        ROLE="agent"; [[ "${HN}" =~ ^c[0-9]+$ ]] && ROLE="server"
      fi

      # Merge hosts snippet (safe no-op if empty)
      cat /etc/hosts.d/* >> /etc/hosts 2>/dev/null || true
      systemctl daemon-reload || true

      unit_exists() {
        local n="$1"
        [[ -f "/etc/systemd/system/${n}.service" ]] \
          || [[ -f "/usr/local/lib/systemd/system/${n}.service" ]] \
          || [[ -f "/usr/lib/systemd/system/${n}.service" ]]
      }

      # 1) Install k3s (server or agent) on LIVE root (curl is present after reboot)
      if [[ "${ROLE}" = "server" ]]; then
        if ! unit_exists k3s || ! command -v /usr/local/bin/k3s >/dev/null 2>&1; then
          echo "[firstboot] Installing k3s server"
          curl -sfL https://get.k3s.io \
            | INSTALL_K3S_CHANNEL=stable INSTALL_K3S_SKIP_ENABLE=true INSTALL_K3S_SKIP_START=true sh -s - server
          systemctl daemon-reload || true
        fi
      else
        if ! unit_exists k3s-agent || ! systemctl list-unit-files | grep -q '^k3s-agent\.service'; then
          echo "[firstboot] Installing k3s agent"
          curl -sfL https://get.k3s.io \
            | INSTALL_K3S_CHANNEL=stable INSTALL_K3S_SKIP_ENABLE=true INSTALL_K3S_SKIP_START=true sh -s - agent
          systemctl daemon-reload || true
        fi
      fi

      # 2) kubectl shim (server writes kubeconfig; agent wonâ€™t have it)
      install -d /usr/local/bin
      ln -sf /usr/local/bin/k3s /usr/local/bin/kubectl
      mkdir -p /root/.kube
      [ -f /etc/rancher/k3s/k3s.yaml ] && ln -sf /etc/rancher/k3s/k3s.yaml /root/.kube/config || true

      # 3) Fetch join token from Rancher (fallback to a preseed file if you ever add one)
      API_URL="${RANCHER_URL}/k8s/clusters/${RANCHER_CLUSTER}/api/v1/namespaces/${TOKEN_SECRET_NS}/secrets/${TOKEN_SECRET_NAME}"
      AUTH="Authorization: Bearer ${RANCHER_TOKEN}"
      TOKEN="$(cat /etc/rancher/k3s/join-token 2>/dev/null || true)"
      waited=0
      echo "[firstboot] Fetching k3s token from Rancher: ${API_URL}"
      until [ -n "${TOKEN}" ] || [ ${waited} -ge 900 ]; do
        RAW="$(curl -sSk -H "${AUTH}" -w '\n%{http_code}' "${API_URL}" || true)"
        BODY="$(printf '%s' "$RAW" | sed '$d')"
        CODE="$(printf '%s' "$RAW" | tail -n1)"
        if [ "$CODE" = "200" ]; then
          B64_TOKEN="$(printf '%s' "$BODY" | tr -d '\n' | awk 'match($0, /"data"\s*:\s*\{\s*"data"\s*:\s*"([^"]*)"/, m){print m[1]}')"
          if [ -n "${B64_TOKEN}" ]; then
            if base64 --help 2>&1 | grep -q -- '--decode'; then
              TOKEN="$(printf '%s' "${B64_TOKEN}" | base64 --decode)"
            else
              TOKEN="$(printf '%s' "${B64_TOKEN}" | base64 -D 2>/dev/null || printf '%s' "${B64_TOKEN}" | base64 -d)"
            fi
          fi
        fi
        [ -n "${TOKEN}" ] || { sleep 10; waited=$((waited+10)); }
      done
      [ -n "${TOKEN}" ] || { echo "[firstboot] No token yet; will retry next boot"; exit 1; }

      # 4) Build role-specific /etc/rancher/k3s/config.yaml  (no heredocs)
      install -d /etc/rancher/k3s
      CFG="/etc/rancher/k3s/config.yaml"
      : > "${CFG}"
      printf 'token: "%s"\n' "${TOKEN}" >> "${CFG}"

      SERVER_TARGET="${BOOTSTRAP_IP:-${BOOTSTRAP_FQDN}}"

      if [[ "${ROLE}" = "server" ]]; then
        printf 'write-kubeconfig-mode: "0644"\n' >> "${CFG}"
        printf 'tls-san:\n' >> "${CFG}"
        printf '  - %s\n' "${VIP_DNS}" >> "${CFG}"
        printf '  - %s\n' "${BOOTSTRAP_FQDN}" >> "${CFG}"
        printf '  - %s\n' "${FQDN}" >> "${CFG}"
        if [ -n "${VIP_IP}" ]; then printf '  - %s\n' "${VIP_IP}" >> "${CFG}"; fi
        printf 'disable:\n  - traefik\n' >> "${CFG}"
        printf 'kube-controller-manager-arg:\n  - cloud-provider=external\n' >> "${CFG}"
        printf 'kubelet-arg:\n  - cloud-provider=external\n' >> "${CFG}"
        if [[ "${HN}" = "${BOOTSTRAP}" ]]; then
          printf 'cluster-init: true\n' >> "${CFG}"
        else
          printf 'server: "https://%s:6443"\n' "${SERVER_TARGET}" >> "${CFG}"
        fi
      else
        # Agent: ONLY agent-safe keys
        printf 'server: "https://%s:6443"\n' "${SERVER_TARGET}" >> "${CFG}"
        printf 'kubelet-arg:\n  - cloud-provider=external\n' >> "${CFG}"
        printf 'node-label:\n  - role=worker\n' >> "${CFG}"
      fi

      # 5) Wait for API (TCP) then start correct service
      wait_for_api() {
        local target="${SERVER_TARGET}"
        until timeout 2 bash -c ">/dev/tcp/${target}/6443" 2>/dev/null; do
          sleep 5
        done
      }
      [[ "${HN}" != "${BOOTSTRAP}" ]] && wait_for_api

      if [[ "${ROLE}" = "server" ]]; then
        systemctl enable --now k3s.service
      else
        systemctl enable --now k3s-agent.service
      fi

      install -d /var/lib/rancher/k3s
      : > /var/lib/rancher/k3s/.firstboot-done

      # ---- stage Sealed Secrets into k3s manifests (server nodes only) ----
      if [[ "${ROLE}" = "server" ]]; then
        MAN_DIR="/var/lib/rancher/k3s/server/manifests"
        install -d -m0755 "${MAN_DIR}"

        # Only the bootstrap server needs to drop these, but harmless elsewhere.
        # Copy staged files atomically so k3s sees complete files.
        for f in /opt/k3s-bootstrap/manifests/*.yaml; do
          [ -f "$f" ] || continue
          base="$(basename "$f")"
          tmp="${MAN_DIR}/.${base}.tmp"
          cp -f "$f" "$tmp"
          mv -f "$tmp" "${MAN_DIR}/${base}"
        done
      fi
  - path: /etc/systemd/system/k3s-firstboot.service
    permissions: '0644'
    owner: root:root
    content: |
      [Unit]
      Description=k3s first-boot (server/agent)
      Wants=network-online.target
      After=network-online.target
      ConditionPathExists=!/var/lib/rancher/k3s/.firstboot-done

      [Service]
      Type=oneshot
      ExecStart=/usr/local/sbin/k3s-firstboot.sh
      Restart=on-failure
      RestartSec=10s

      [Install]
      WantedBy=multi-user.target

  - path: /opt/k3s-bootstrap/manifests/10-sealed-secrets.helmchart.yaml
    permissions: '0644'
    owner: root:root
    content: |
      apiVersion: helm.cattle.io/v1
      kind: HelmChart
      metadata:
        name: sealed-secrets
        namespace: kube-system
      spec:
        repo: https://bitnami-labs.github.io/sealed-secrets
        chart: sealed-secrets
        version: 2.17.3
        targetNamespace: kube-system
        valuesContent: |
          fullnameOverride: sealed-secrets

runcmd:
  - [ /usr/sbin/transactional-update, "-n", "run", "sh", "-c",
      "zypper -n in qemu-guest-agent curl && systemctl enable qemu-guest-agent.service && systemctl enable k3s-firstboot.service" ]

power_state:
  mode: reboot
  message: "Reboot to start k3s"
  timeout: 30
  condition: true
