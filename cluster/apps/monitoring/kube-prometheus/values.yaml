crds:
  enabled: true
kube-state-metrics:
  metricLabelsAllowlist:
    - "persistentvolumeclaims=[*]"
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          targetLabel: kubernetes_node
          sourceLabels:
            - __meta_kubernetes_pod_node_name

grafana:
  enabled: true
  grafana.ini:
    auth:
        signout_redirect_url: "https://authentik.company/application/o/grafana/end-session/"
        oauth_auto_login: true
    auth.generic_oauth:
        name: authentik
        enabled: true
        client_id: $__file{/etc/secrets/grafana_secret/client_id}
        client_secret: $__file{/etc/secrets/grafana_secret/client_secret}
        scopes: "openid profile email"
        auth_url: "https://auth.kng.house/application/o/authorize/"
        token_url: "https://auth.kng.house/application/o/token/"
        api_url: "https://auth.kng.house/application/o/userinfo/"
        # Optionally map user groups to Grafana roles
        role_attribute_path: contains(groups, 'Homelab Admins') && 'Admin' || contains(groups, 'Grafana Editors') && 'Editor' || 'Viewer'
  admin:
    existingSecret: grafana-secret
  # Provision grafana-dashboards-kubernetes
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'grafana-dashboards-kubernetes'
        orgId: 1
        folder: 'Kubernetes'
        type: file
        disableDeletion: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/grafana-dashboards-kubernetes
  dashboards:
    grafana-dashboards-kubernetes:
      k8s-system-api-server:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-api-server.json
        token: ''
      k8s-system-coredns:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-system-coredns.json
        token: ''
      k8s-views-global:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-global.json
        token: ''
      k8s-views-namespaces:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-namespaces.json
        token: ''
      k8s-views-nodes:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-nodes.json
        token: ''
      k8s-views-pods:
        url: https://raw.githubusercontent.com/dotdc/grafana-dashboards-kubernetes/master/dashboards/k8s-views-pods.json
        token: ''
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
      certmanager.k8s.io/acme-challenge-type: dns01
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    hosts:
      - mon.kng.house
    tls:
      - secretName: grafana-cert
        hosts:
          - mon.kng.house
alertmanager:
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
      certmanager.k8s.io/acme-challenge-type: dns01
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    hosts:
      - alertmanager.kng.house
    tls:
      - secretName: alertmanager-cert
        hosts:
          - alertmanager.kng.house
prometheus:
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: letsencrypt-prod
      certmanager.k8s.io/acme-challenge-type: dns01
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    hosts:
      - prometheus.kng.house
    tls:
      - secretName: prometheus-cert
        hosts:
          - prometheus.kng.house
  prometheusSpec:
    retention: 10d
    retentionSize: "10GB"
    walCompression: true
    resources:
      requests:
        memory: 400Mi
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: longhorn
          resources:
            requests:
              storage: 50Gi
prometheusOperator:
  admissionWebhooks:
    certManager:
      enabled: true
    patch:
      enabled: false
      ttlSecondsAfterFinished: 30